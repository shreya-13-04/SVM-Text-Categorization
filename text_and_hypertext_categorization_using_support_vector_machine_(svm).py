# -*- coding: utf-8 -*-
"""Text and Hypertext Categorization using Support Vector Machine (SVM)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CX80UpFKX9T9ekriQLCDuvZ4RyV3lNBX

**Import Libraries**
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.svm import SVC
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

"""** Load Dataset**"""

from sklearn.datasets import fetch_20newsgroups

categories = ['rec.sport.hockey', 'sci.med']
data = fetch_20newsgroups(subset='all', categories=categories, shuffle=True, random_state=42)

df = pd.DataFrame({'text': data.data, 'label': data.target})
df.head()

"""**Preprocessing + Vectorization**"""

vectorizer = TfidfVectorizer(stop_words='english', max_features=5000)
X = vectorizer.fit_transform(df['text'])
y = df['label']

"""**Train-Test Split**"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""**Train SVM Model**"""

model = SVC(kernel='linear', probability=True)
model.fit(X_train, y_train)

"""**Evaluation**"""

y_pred = model.predict(X_test)

print("Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

"""**Threshold-Based Classification**"""

probs = model.predict_proba(X_test)[:, 1]
threshold = 0.6

pred_thresholded = (probs > threshold).astype(int)

print("Thresholded Accuracy:", accuracy_score(y_test, pred_thresholded))

"""**Sample Input**"""

sample_text = ["The new AI model has outperformed previous benchmarks in natural language understanding."]


sample_vector = vectorizer.transform(sample_text)

predicted_class = model.predict(sample_vector)[0]
predicted_prob = model.predict_proba(sample_vector)[0]

class_names = data.target_names

print("Sample Text:", sample_text[0])
print("Predicted Category:", class_names[predicted_class])
print("Confidence Scores:", predicted_prob)

"""**Visualize the Output**"""

import matplotlib.pyplot as plt


plt.figure(figsize=(6, 4))
plt.bar(class_names, predicted_prob, color='skyblue')
plt.title('Prediction Confidence Scores')
plt.ylabel('Probability')
plt.ylim(0, 1)
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()